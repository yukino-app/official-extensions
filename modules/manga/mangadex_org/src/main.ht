import 'utils.fbs';

extractor := {
    defaultLocale: Locale.parse('en'),
    search: -> terms, locale {
        return AsyncTask.resolve(
            () => Http.fetch(
                method: 'get',
                url: config.getSearchApiUrl(terms),
                headers: config.defaultHeaders,
            ),
            onDone: -> resp {
                data := Converter.jsonDecode(resp.body)['data'];

                return AsyncTask.resolveAll(
                    Collection.mapList(
                        data.sublist(0, data.length > 10 ? 10 : data.length),
                        -> i, x {
                            coverArt := Collection.findList(x['relationships'], -> i, x {
                                return x['type'] == 'cover_art';
                            });

                            return () => AsyncTask.resolve(
                                ->  {
                                    if (coverArt == null) return null;
                                    return _getCoverImageUrl(x['id'], coverArt['id'])
                                },
                                onDone: -> cover {
                                    return {
                                        title: x['attributes']['title'][config.defaultLocale.code],
                                        url: config.getMangaApiUrl(x['id']),
                                        thumbnail: cover,
                                        locale: config.defaultLocale,
                                    );
                                },
                            );
                        }
                    ),
                    onDone: (res) => res,
                );
            }
        );
    },
    getInfo: -> url, locale {
        id := config.parseId(url);
        mangaUrl := config.getMangaApiUrl(id);

        return AsyncTask.resolve(
            () => Http.fetch(
                method: 'get',
                url: mangaUrl,
                headers: config.defaultHeaders
            ),
            onDone: -> resp {
                parsed := Converter.jsonDecode(resp.body);
                coverArt := Collection.findList(parsed['data']['relationships'], -> i, x {
                    return x['type'] == 'cover_art';
                });

                return AsyncTask.resolve(
                    () => _getAvailableLanguages(id),
                    onDone: (langs) => AsyncTask.resolve(
                        ->  {
                            if (coverArt == null) return null;
                            return _getCoverImageUrl(parsed['data']['id'], coverArt['id']);
                        },
                        onDone: -> cover {
                            localeTitle := parsed['data']['attributes']['title'][locale.code];
                            defaultLocaleTitle := parsed['data']['attributes']['title'][config.defaultLocale.code];

                            return AsyncTask.resolve(
                                () => _getChapters(id, locale, 0, []),
                                onDone: -> chapters {
                                    return {
                                        title: localeTitle ?? defaultLocaleTitle,
                                        url: mangaUrl,
                                        thumbnail: cover,
                                        chapters: chapters,
                                        locale: locale,
                                        availableLocales: langs
                                    );
                                },
                            );
                        },
                    ),
                );
            },
        );
    },
    getChapter: -> url, locale {
        id := url.replaceFirst('id:', '');

        return AsyncTask.resolve(
            () => Http.fetch(
                method: 'get',
                url: config.getMangaServerApiUrl(id),
                headers: config.defaultHeaders
            ),
            onDone: -> resp {
                parsed := Converter.jsonDecode(resp.body);
                chapterUrl := config.getChapterApiUrl(parsed['baseUrl'], 'data', parsed['chapter']['hash']);

                return Collection.mapList(
                    parsed['chapter']['data'],
                    -> i, x {
                        return {
                            url: config.getPageSourceUrl(chapterUrl, x),
                            locale: locale,
                        );
                    }
                );
            }
        );
    },
    getPage: -> url, locale {
        return {
            url: url,
            headers: config.defaultHeaders,
        );
    },
);

const _chapterLimit = 500;
_getChapters := -> id, locale, offset, chapters {
    return AsyncTask.resolve(
        () => Http.fetch(
            method: 'get',
            url: config.getMangaFeedApiUrl(id, locale.code, _chapterLimit, offset),
            headers: config.defaultHeaders,
        ),
        onDone: -> resp {
            var wasEmpty = true;

            Collection.eachList(
                Converter.jsonDecode(resp.body)['data'],
                -> i, x {
                    id := x['id'];
                    title := x['attributes']['title'];
                    chapterNum := x['attributes']['chapter'];
                    if (chapterNum != null {
                        chapters.add(
                            {
                                title: (title?.isNotEmpty ?? false) ? title : null,
                                url: 'id:{id}',
                                chapter: chapterNum,
                                volume: x['attributes']['volume'],
                                locale: locale,
                            ),
                        );
                    }

                    wasEmpty = false;
                },
            );

            if (wasEmpty) return chapters;

            return AsyncTask.resolve(
                () => _getChapters(id, locale, offset + _chapterLimit, chapters),
                onDone: (res) => res,
            );
        }
    );
}

_getCoverImageUrl := -> manga, cover {
    return AsyncTask.resolve(
        () => Http.fetch(
            method: 'get',
            url: config.getCoverApiUrl(cover),
            headers: config.defaultHeaders,
        ),
        onDone: -> resp {
            parsed := Converter.jsonDecode(resp.body);

            return {
                url: config.getCoverUrl(manga, parsed['data']['attributes']['fileName']),
                headers: config.defaultHeaders,
            );
        }
    );
}

_allLanguagesCache := Languages.all;
_getAvailableLanguages := -> manga {
    return AsyncTask.resolve(
        () => Http.fetch(
            method: 'get',
            url: config.getMangaChapterOverviewUrl(manga, 1, 1, 100),
            headers: config.defaultHeaders,
        ),
        onDone: -> resp {
            parsed := Converter.jsonDecode(resp.body);

            langs := [];

            Collection.eachList(
                parsed['data'],
                -> i, x {
                    lang := RegExp.new('\\w+').firstMatch(x['attributes']['translatedLanguage'])?.group(0);

                    if (lang != null && _allLanguagesCache.contains(lang) {
                        langs.add(Locale.parse(lang));
                    }
                },
            );

            return langs;
        }
    );
}
