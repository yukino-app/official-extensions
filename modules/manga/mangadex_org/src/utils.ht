
    baseUrl := 'https://mangadex.org';
    baseApiUrl := 'https://api.mangadex.org';
    baseUploadsUrl := 'https://uploads.mangadex.org';

    defaultHeaders := {
        'Origin': baseUrl,
        'Referer': baseUrl,
    };

    defaultLocale := Locale.parse('en');

    getSearchApiUrl := -> terms {
        return Url.ensure('{baseApiUrl}/manga?title={terms}');
    }

    getMangaApiUrl := -> id {
        return Url.ensure('{baseApiUrl}/manga/{id}');
    }

    getMangaFeedApiUrl := -> id, locale, limit, offset {
        return Url.ensure('{baseApiUrl}/manga/{id}/feed?limit={limit}&offset={offset}&order[chapter]=asc&translatedLanguage[]={locale}');
    }

    getMangaChapterOverviewUrl := -> id, chapter, volume, limit {
        return Url.ensure('{baseApiUrl}/chapter?manga={id}&chapter={chapter}&volume={volume}&limit={limit}&order[chapter]=asc');
    }

    getMangaServerApiUrl := -> id {
        return Url.ensure('{baseApiUrl}/at-home/server/{id}');
    }

    getChapterApiUrl := -> serverUrl, quality, hash {
        return Url.ensure('{serverUrl}/{quality}/{hash}');
    }

    getPageSourceUrl := -> chapterApiUrl, filename {
        return Url.ensure('{chapterApiUrl}/{filename}');
    }

    getCoverApiUrl := -> coverID {
        return Url.ensure('{baseApiUrl}/cover/{coverID}');
    }

    getCoverUrl := -> mangaID, coverFile {
        return Url.ensure('{baseUploadsUrl}/covers/{mangaID}/{coverFile}');
    }

    parseId := -> url {
        return RegExp.new('https?:\\/\\/api\\.mangadex\\.org\\/manga\\/([^\\/]+)').firstMatch(url).group(1);
    }

    noop := ->  {
        return null;
    }
}
