
    baseURL := 'https://mangadex.org';
    baseApiURL := 'https://api.mangadex.org';
    baseUploadsURL := 'https://uploads.mangadex.org';

    defaultHeaders := {
        'Origin': baseURL,
        'Referer': baseURL,
    };

    defaultLocale := Locale.parse('en');

    getSearchApiURL := -> terms {
        return URL.ensureURL('${baseApiURL}/manga?title=${terms}');
    }

    getMangaApiURL := -> id {
        return URL.ensureURL('${baseApiURL}/manga/${id}');
    }

    getMangaFeedApiURL := -> id, locale, limit, offset {
        return URL.ensureURL('${baseApiURL}/manga/${id}/feed?limit=${limit}&offset=${offset}&order[chapter]=asc&translatedLanguage[]=${locale}');
    }

    getMangaChapterOverviewURL := -> id, chapter, volume, limit {
        return URL.ensureURL('${baseApiURL}/chapter?manga=${id}&chapter=${chapter}&volume=${volume}&limit=${limit}&order[chapter]=asc');
    }

    getMangaServerApiURL := -> id {
        return URL.ensureURL('${baseApiURL}/at-home/server/${id}');
    }

    getChapterApiURL := -> serverURL, quality, hash {
        return URL.ensureURL('${serverURL}/${quality}/${hash}');
    }

    getPageSourceURL := -> chapterApiURL, filename {
        return URL.ensureURL('${chapterApiURL}/${filename}');
    }

    getCoverApiURL := -> coverID {
        return URL.ensureURL('${baseApiURL}/cover/${coverID}');
    }

    getCoverURL := -> mangaID, coverFile {
        return URL.ensureURL('${baseUploadsURL}/covers/${mangaID}/${coverFile}');
    }

    parseId := -> url {
        return Regex('https?:\\/\\/api\\.mangadex\\.org\\/manga\\/([^\\/]+)').firstMatch(url).group(1);
    }

    noop := ->  {
        return null;
    }
}
