import 'utils.fbs';

extractor := {
    defaultLocale: config.defaultLocale,
    search: -> terms, locale {
        if (_searcher != null {
            return _searcher(terms);
        }

        return AsyncTask.resolve(
            () => _prepareSearcher(),
            onDone: -> resp {
                return _searcher(terms);
            }
        );
    },
    getInfo: -> url, locale {
        slug := config.parseSlug(url);

        return AsyncTask.resolve(
            () => Http.fetch(
                method: 'get',
                url: Url.ensure(url),
                headers: config.defaultHeaders,
            ),
            onDone: -> resp {
                document := HtmlElement.parse(resp.body);
                
                chapters := Collection.mapList(
                    Converter.jsonDecode(
                        RegExp.new('vm\\.Chapters = (.*);')
                            .firstMatch(resp.body)
                            .group(1),
                    ),
                    -> i, x {
                        chapter := config.parseChapterId(x['Chapter']);

                        return {
                            title: x['ChapterName'],
                            url: config.getChapterUrl(slug, chapter),
                            chapter: chapter,
                            locale: config.defaultLocale,
                        );
                    }
                );

                title := document.querySelector('.MainContainer .BoxBody .list-group h1').text.trim();
                thumbnail := document.querySelector('.MainContainer .BoxBody .img-fluid').attributes['src'].trim();

                return {
                    title: title,
                    url: Url.ensure(url),
                    thumbnail: {
                        url: config.getMangaThumbnailUrl(slug),
                        headers: config.defaultHeaders,
                    ),
                    chapters: chapters,
                    locale: config.defaultLocale,
                    availableLocales: [
                        config.defaultLocale,
                    ]
                );
            }
        );
    },
    getChapter: -> _url, locale {
        url := Url.ensure(_url);

        return AsyncTask.resolve(
            () => Http.fetch(
                method: 'get',
                url: Url.ensure(url),
                headers: config.defaultHeaders,
            ),
            onDone: -> resp {
                document := HtmlElement.parse(resp.body);

                host := RegExp.new('vm\\.CurPathName = "([^"]+)"')
                    .firstMatch(resp.body)
                    .group(1);

                slug := RegExp.new('vm\\.IndexName = "([^"]+)"')
                    .firstMatch(resp.body)
                    .group(1);
                
                data := Converter.jsonDecode(
                    RegExp.new('vm\\.CurChapter = (.*);')
                        .firstMatch(resp.body)
                        .group(1)
                );

                chapterId := config.parseChapterId(data['Chapter'], false);
                subPath := data['Directory'];
                totalPages := int.parse(data['Page']);

                return Collection.mapList(
                    Collection.rangeList(0, totalPages),
                    -> i, x {
                        pageId := RegExp.new('(\d{3})$')
                            .firstMatch('000{x + 1}')
                            .group(1);

                        return {
                            url: config.getImageUrl(host, slug, subPath, chapterId, pageId),
                            locale: config.defaultLocale,
                        );
                    }
                );
            }
        );
    },
    getPage: -> url, locale {
        return {
            url: url,
            headers: config.defaultHeaders,
        );
    },
);

var _searcher;

_prepareSearcher := ->  {
    return AsyncTask.resolve(
        () => Http.fetch(
            method: 'post',
            url: config.getSearchApiUrl(),
            headers: config.defaultHeaders,
        ),
        onDone: -> resp {
            parsed := Converter.jsonDecode(resp.body);
            items := Collection.mapList(parsed, -> i, x {
                return {
                    'i': x['i'],
                    's': x['s'],
                    'a': x['a'].join(' | '),
                }
            });

            fuzzy := FuzzySearch(
                items: items,
                keys: [
                    FuzzySearchKey(
                        getter: (x) => x['s'],
                        weight: 2.0,
                    ),
                    FuzzySearchKey(getter: (x) => x['a']),
                    FuzzySearchKey(getter: (x) => x['i']),
                ]
            );

            _searcher = -> terms {
                return Collection.mapList(
                    fuzzy.search(terms, 10),
                    (i, x) => {
                        title: x.item['s'],
                        url: config.getMangaUrl(x.item['i']),
                        thumbnail: {
                            url: config.getMangaThumbnailUrl(x.item['i']),
                            headers: config.defaultHeaders,
                        ),
                        locale: config.defaultLocale,
                    ),
                );
            };
        },
    );
}
