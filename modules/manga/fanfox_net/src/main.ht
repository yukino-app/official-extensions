import 'utils.ht';

extractor := {
    defaultLocale: $.defaultLocale,
    search: -> terms, locale {
        return AsyncTask.resolve(
            () => Http.fetch(
                method: 'get',
                url: $.getSearchURL(terms),
                headers: $.defaultHeaders,
            ),
            onDone: -> resp {
                document := HtmlElement.parse(resp.body);

                return Collection.mapList(document.querySelectorAll('.line-list li'), -> i, x {
                    link := x.querySelector('.manga-list-4-item-title a');
                    url := link.attributes['href'];
                    image := x.querySelector('img').attributes['src'];

                    return {
                        title: link.text.trim(),
                        url: $.appendBaseURL(url),
                        thumbnail: {
                            url: Url.ensure(image),
                            headers: $.defaultHeaders,
                        ),
                        locale: $.defaultLocale,
                    );
                });
            }
        );
    },
    getInfo: -> _url, locale {
        url := Url.ensure(_url);
        
        return AsyncTask.resolve(
            () => Http.fetch(
                method: 'get',
                url: url,
                headers: $.defaultHeaders
            ),
            onDone: -> resp {
                document := HtmlElement.parse(resp.body);
                
                chapters := Collection.filterList(
                    Collection.mapList(
                        document.querySelectorAll('#chapterlist li a'),
                        -> i, x {
                            title := x.querySelector('.title3').text;
                            shortTitle := Regex('-(.*)').firstMatch(title)?.group(1);
                            route := x.attributes['href'];
                            vol := Regex('Vol.(\\d+)').firstMatch(title)?.group(1);
                            chap := Regex('Ch.([\\d.]+)').firstMatch(title)?.group(1);

                            if (chap != null {
                                return {
                                    title: shortTitle ?? title,
                                    url: $.appendBaseURL(route),
                                    chapter: chap,
                                    volume: vol,
                                    locale: locale,
                                );
                            }

                            return null;
                        }
                    ),
                    (i, x) => x != null,
                );

                return {
                    title: document.querySelector('.detail-info-right-title-font').text,
                    url: url,
                    thumbnail: {
                        url: Url.ensure(document.querySelector('img.detail-info-cover-img').attributes['src']),
                        headers: $.defaultHeaders,
                    ),
                    chapters: chapters,
                    locale: $.defaultLocale,
                    availableLocales: [
                        $.defaultLocale,
                    ]
                );
            }
        );
    },
    getChapter: -> _url, locale {
        url := $.getMobileURL(_url);

        return AsyncTask.resolve(
            () => Http.fetch(
                method: 'get',
                url: url,
                headers: $.defaultHeaders,
            ),
            onDone: -> resp {
                return Collection.mapList(
                    HtmlElement.parse(resp.body).querySelector('select.mangaread-page').querySelectorAll('option'),
                    -> i, x {
                        return {
                            url: Url.ensure(x.attributes['value']),
                            locale: $.defaultLocale,
                        );
                    }
                );
            }
        );
    },
    getPage: -> _url, locale {
        url := $.getMobileURL(_url);

        return AsyncTask.resolve(
            () => Http.fetch(
                method: 'get',
                url: url,
                headers: $.defaultHeaders,
            ),
            onDone: -> resp {
                img := Regex('<img src="(.*?)".*id="image".*>').firstMatch(resp.body)?.group(1);
                if (img == null) throw 'Failed to parse image URL';

                return {
                    url: Url.ensure(img),
                    headers: $.defaultHeaders,
                );
            }
        );
    },
);