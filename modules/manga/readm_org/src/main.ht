import 'utils.fbs';

extractor := {
    defaultLocale: config.defaultLocale,
    search: -> terms, locale {
        return AsyncTask.resolve(
            () => Http.fetch(
                method: 'post',
                url: config.getSearchUrl(),
                headers: Collection.mergeMap(config.defaultHeaders, {
                    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                    'x-requested-with': 'XMLHttpRequest'
                }),
                body: Url.joinQueryParameters({
                    'dataType': 'json',
                    'phrase': terms,
                }),
            ),
            onDone: -> resp {
                parsed := Converter.jsonDecode(resp.body);

                return Collection.mapList(parsed['manga'] ?? [], -> i, x {
                    url := x['url'];
                    thumbnail := x['image'];
                    
                    return {
                        title: x['title'],
                        url: config.appendBaseUrl(url),
                        thumbnail: {
                            url: config.appendBaseUrl(thumbnail),
                            headers: config.defaultHeaders,
                        ),
                        locale: config.defaultLocale,
                    );
                });
            }
        );
    },
    getInfo: -> url, locale {
        return AsyncTask.resolve(
            () => Http.fetch(
                method: 'get',
                url: Url.ensure(url),
                headers: config.defaultHeaders,
            ),
            onDone: -> resp {
                document := HtmlElement.parse(resp.body);
                
                chapters := Collection.mapList(
                    document.querySelectorAll('.episodes-list .table-episodes-title a'),
                    -> i, x {
                        sep := x.text.replaceFirst('Chapter', '').trim().split(':');
                        url := x.attributes['href'].trim();
                        cvMatch := RegExp.new('Chapter (\\d+\\.?\\d*)(v(\\d+))?').firstMatch(sep[0]);

                        return {
                            title: sep.length > 1 ? sep[1].trim() : null,
                            url: config.appendBaseUrl(url),
                            chapter: cvMatch?.group(1) ?? sep[0].replaceFirst('Chapter', '').trim(),
                            volume: cvMatch?.group(3),
                            locale: config.defaultLocale,
                        );
                    }
                );

                title := document.querySelector('.page-title').text.trim();
                thumbnail := document.querySelector('.series-profile-thumb').attributes['src'].trim();

                return {
                    title: title,
                    url: Url.ensure(url),
                    thumbnail: {
                        url: config.appendBaseUrl(thumbnail),
                        headers: config.defaultHeaders,
                    ),
                    chapters: chapters,
                    locale: config.defaultLocale,
                    availableLocales: [
                        config.defaultLocale,
                    ]
                );
            }
        );
    },
    getChapter: -> _url, locale {
        url := Url.ensure(_url);

        return AsyncTask.resolve(
            () => Http.fetch(
                method: 'get',
                url: Url.ensure(url),
                headers: config.defaultHeaders,
            ),
            onDone: -> resp {
                document := HtmlElement.parse(resp.body);

                return Collection.mapList(
                    document.querySelectorAll('.ch-images img'),
                    -> i, x {
                        url := x.attributes['src'].trim();

                        return {
                            url: config.appendBaseUrl(url),
                            locale: config.defaultLocale,
                        );
                    }
                );
            }
        );
    },
    getPage: -> url, locale {
        return {
            url: url,
            headers: config.defaultHeaders,
        );
    },
);
