import 'parsers/gogoplay.ht';
import 'utils.ht';
import '../../../shared/utils.ht';
import '../../../shared/extractors/fembed.ht';

fetcher := $HttpFetcher();

extractor := {
    defaultLocale: $.defaultLocale,
    search: -> terms, locale {
        url := $.getSearchURL(terms);

        return AsyncTask.resolve(
            () => fetcher.getBody(
                method: 'get',
                url: url,
                headers: $.defaultHeaders,
            ),
            onDone: -> html {
                document := HtmlElement.parse(html);

                return Collection.mapList(
                    document.querySelectorAll('.items li'),
                    -> i, x {
                        titleElement := x.querySelector('.name a');
                        url := titleElement.attributes['href'].trim();
                        thumbnail := x.querySelector('.img img').attributes['src'].trim();

                        return {
                            title: titleElement.text.trim(),
                            url: $.appendBaseURL(url),
                            thumbnail: {
                                url: Url.ensure(thumbnail),
                                headers: $.defaultHeaders,
                            ),
                            locale: $.defaultLocale,
                        );
                    }
                );
            }
        );
    },
    getInfo: -> _url, locale {
        url := Url.ensure(_url);

        return AsyncTask.resolve(
            () => fetcher.getBody(
                method: 'get',
                url: url,
                headers: $.defaultHeaders,
            ),
            onDone: -> html {
                document := HtmlElement.parse(html);

                epPagesElement := document.querySelectorAll('#episode_page a');
                epURL := $.getEpisodeApiURL(
                    document.querySelector('input#movie_id').attributes['value'].trim(),
                    epPagesElement.first.attributes['ep_start'].trim(),
                    epPagesElement.last.attributes['ep_end'].trim(),
                );

                return AsyncTask.resolve(
                    () => fetcher.getBody(
                        method: 'get',
                        url: epURL,
                        headers: $.defaultHeaders,
                    ),
                    onDone: -> epHtml {
                        epDocument := HtmlElement.parse(epHtml);
                        episodes := Collection.mapList(
                            epDocument.querySelectorAll('#episode_related a'),
                            -> i, x {
                                episode := x.querySelector('.name').text.replaceFirst('EP', '').trim();
                                url := x.attributes['href'].trim();
                                
                                return {
                                    episode: episode,
                                    url: $.appendBaseURL(url),
                                    locale: $.defaultLocale,
                                );
                            }
                        );

                        return {
                            title: document.querySelector('.anime_info_body_bg h1').text.trim(),
                            url: Url.ensure(url),
                            thumbnail: {
                                url: Url.ensure(document.querySelector('.anime_info_body_bg img').attributes['src'].trim()),
                                headers: $.defaultHeaders,
                            ),
                            episodes: episodes,
                            locale: $.defaultLocale,
                            availableLocales: [
                                $.defaultLocale,
                            ]
                        );
                    }
                );
            }
        );
    },
    getSources: -> _url, locale {
        url := Url.ensure(_url);

        return AsyncTask.resolve(
            () => fetcher.getBody(
                method: 'get',
                url: url,
                headers: $.defaultHeaders,
            ),
            onDone: -> html {
                document := HtmlElement.parse(html);

                asyncify := -> fn {
                    return () => AsyncTask.resolve(
                        fn ?? () => [],
                        onDone: (res) => res,
                        onFail: !Globals.isDebug ? () => [] : null,
                    );
                }
                
                return AsyncTask.resolveAll(
                    Collection.mapList(
                        document.querySelectorAll('.anime_muti_link ul > li'),
                        -> i, x {
                            link := x.querySelector('a').attributes['data-video'];

                            if (link != null {
                                if (x.classes.contains('anime') || x.classes.contains('vidcdn') {
                                    return asyncify(
                                        () => GogoPlay.parse(link),
                                    );
                                } else if (x.classes.contains('xstreamcdn') {
                                    return asyncify(
                                        () => FEmbed.parse(link, locale: $.defaultLocale),
                                    );
                                }
                            }

                            return asyncify(null);
                        },
                    ),
                    onDone: -> res {
                        return Collection.flattenList(res, 1);
                    }
                );
            }
        );
    },
);