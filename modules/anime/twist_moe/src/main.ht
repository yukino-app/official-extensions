import 'utils.ht';

var _searcher;

extractor := AnimeExtractor(
    defaultLocale: $.defaultLocale,
    search: -> terms, locale {
        if (_searcher != null {
            return _searcher(terms);
        }

        return AsyncTask.resolve(
            () => Http.fetch(
                method: 'get',
                url: $.getSearchApiURL(),
                headers: $.defaultHeaders,
            ),
            onDone: -> resp {
                parsed := Converter.jsonDecode(resp.body);

                items := Collection.mapList(parsed, -> i, x {
                    return {
                        'title': x['title'],
                        'altTitle': x['altTitle'] ?? '',
                        'url': URL.ensureURL($.getAnimeURL(x['slug']['slug'])),
                        'locale': $.defaultLocale,
                    };
                });

                _searcher = -> terms {
                    fuzzy := FuzzySearch(
                        items: items,
                        keys: [
                            FuzzySearchKey(
                                getter: (x) => x['title'],
                                weight: 2.0,
                            ),
                            FuzzySearchKey(
                                getter: (x) => x['altTitle'],
                            ),
                        ]
                    );

                    return Collection.mapList(
                        fuzzy.search(terms, 10),
                        (i, x) => SearchInfo(
                            title: x.item['title'],
                            url: x.item['url'],
                            locale: x.item['locale'],
                        ),
                    );
                };

                return _searcher(terms);
            },
        );
    },
    getInfo: -> url, locale {
        slug := $.parseSlug(url);

        return AsyncTask.resolve(
            () => Http.fetch(
                method: 'get',
                url: $.getAnimeApiURL(slug),
                headers: $.defaultHeaders,
            ),
            onDone: -> resp {
                parsed := Converter.jsonDecode(resp.body);
                animeURLP := $.getAnimeURL(slug);

                return AnimeInfo(
                    title: parsed['title'],
                    url: animeURLP,
                    episodes: Collection.mapList(parsed['episodes'], -> i, x {
                        epNum := x['number'].toString();

                        return EpisodeInfo(
                            episode: epNum,
                            url: URL.ensureURL('${animeURLP}/${epNum}'),
                            locale: $.defaultLocale,
                        );
                    }),
                    locale: $.defaultLocale,
                    availableLocales: [
                        $.defaultLocale,
                    ]
                );
            },
        );
    },
    getSources: -> url, locale {
        slug := $.parseSlug(url);
        episode := Regex('\\d+$').firstMatch(url).group(0);

        if (_sourceCache[slug] != null {
            return _getSources(slug, episode);
        }

        return AsyncTask.resolve(
            () => Http.fetch(
                method: 'get',
                url: $.getAnimeSourcesURL(slug),
                headers: $.defaultHeaders,
            ),
            onDone: -> resp {
                parsed := Converter.jsonDecode(resp.body);

                _sourceCache[slug] = Collection.mapList(parsed, -> i, x {
                    currentEpisode := x['number'].toString();

                    return {
                        'episode': currentEpisode,
                        'quality': 'unknown',
                        'source': x['source'],
                        'headers': {
                            'Referer': $.appendBaseURL('/a/${slug}/${currentEpisode}'),
                            'User-Agent': Http.defaultUserAgent,
                        },
                        'locale': $.defaultLocale,
                    };
                });

                return _getSources(slug, episode);
            }
        );
    },
);

_sourceCache := {};

_getSources := -> slug, episode {
    src := Collection.findList(_sourceCache[slug], -> i, x {
        return x['episode'] == episode;
    });
    if (src == null) throw 'Unknown episode: ${episode}';

    if (src['url'] == null {
        src['url'] = $.getCdnURL($.decryptSourceURL(src['source']));
    }

    return [
        EpisodeSource(
            url: src['url'],
            headers: src['headers'],
            quality: 'unknown',
            locale: src['locale'],
        ),
    ];
}
