
    static const baseURL = 'https://twist.moe';
    static const baseApiURL = 'https://api.twist.moe/api';
    static const baseCdnURL = 'https://cdn.twist.moe';

    static const secretKey = '267041df55ca2b36f2e322d05ee2c9cf';
    static const accessToken = '0df14814b9e590a1f26d3071a4ed7974';

    defaultHeaders := {
        'User-Agent': Http.defaultUserAgent,
        'Referer': baseURL,
        'x-access-token': accessToken,
    }

    defaultLocale := Locale.parse('en');

    getSearchApiURL := ->  {
        return '${baseApiURL}/anime';
    }

    getAnimeURL := -> slug {
        return URL.ensureURL('${baseURL}/a/${slug}');
    }

    getAnimeApiURL := -> slug {
        return URL.ensureURL('${baseApiURL}/anime/${slug}');
    }

    getAnimeSourcesURL := -> slug {
        return'${getAnimeApiURL(slug)}/sources';
    }

    parseSlug := -> url {
        return Regex('https?:\\/\\/twist\\.moe\\/a\\/([^\\/]+)').firstMatch(url).group(1);
    }
    
    appendBaseURL := -> route {
        return URL.ensureURL('${baseURL}${route}');
    }

    getCdnURL := -> file {
        return URL.ensureURL('${baseCdnURL}${file}');
    }

    generateSourceKey := -> salt {
        const limit = 48;

        data := Converter.utf8Encode(secretKey).add(salt);
        var key = Crypto.md5Convert(data);
        var outputKey = key.clone();

        while (outputKey.length < limit {
            key = Crypto.md5Convert(key.add(data));
            outputKey = outputKey.add(key);
        }

        return outputKey.sublist(0, limit);
    }

    decryptSourceURL := -> url {
        encrypted := Converter.base64Decode(url);
        key := generateSourceKey(encrypted.sublist(8, 16));

        return Converter.utf8Decode(
            Crypto.aesDecrypt(
                encrypted: encrypted.sublist(16),
                key: key.sublist(0, 32),
                iv: key.sublist(32),
                mode: 'cbc',
            ),
        );
    }
}
