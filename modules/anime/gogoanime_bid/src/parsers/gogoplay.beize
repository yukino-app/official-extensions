import '../config.beize' as config;

defaultHeaders := {
    ['User-Agent']: Http.defaultDesktopUserAgent(),
};

makeHeaders := -> headers : Object.apply(
    Object.clone(defaultHeaders),
    headers,
);

getAjaxApiUrl := -> baseUrl, query : Url.ensure(
    '{}/encrypt-ajax.php?{}'.format([baseUrl, query])
);

allowedQualities := ['360', '480', '720', '1080'];
tryGetQuality := -> url : allowedQualities.find(-> x : url.contains(x)) ?? 'unknown';

# Source: (The credit goes to them)
#  - https://github.com/justfoolingaround/animdl/blob/master/animdl/core/codebase/extractors/gogoplay/__init__.py

parse := -> async url {
    url = Url.ensure(url);
    parsedUrl := Url.parse(url);
    resp := Http.request({
        method: 'get',
        url: url,
        headers: makeHeaders({
            Referer: parsedUrl.origin
        }),
    }).await;
    
    _matches := RegExp.new(r'container-(\d+)').allMatches(resp.body);
    _fKey := _matches[0]?.group(1);
    _sKey := RegExp.new(r'videocontent-(\d+)').firstMatch(resp.body)?.group(1);
    _iv := _matches[1]?.group(1);
    _dValue := RegExp.new(r'data-value="([^"]+)"').firstMatch(resp.body)?.group(1);
    if (!_fKey || !_sKey || !_iv || !_dValue) return [];

    fKey := Convert.encodeUtf8(_fKey);
    sKey := Convert.encodeUtf8(_sKey);
    iv := Convert.encodeUtf8(_iv);
    decrypted := encrypto.decrypt({
        data: Convert.decodeBase64(_dValue),
        key: fKey,
        iv: iv,
    });
    dQueryParameters := Url.splitQueryString('id=' + Convert.decodeUtf8(decrypted));
    encryptedId := encrypto.encrypt({
        data: Convert.encodeUtf8(dQueryParameters.id),
        key: fKey,
        iv: iv,
    });
    dQueryParameters.alias = dQueryParameters.id;
    dQueryParameters.id = Convert.encodeBase64(encryptedId);

    sResp := Http.request({
        method: 'get',
        url: getAjaxApiUrl(
            parsedUrl.origin,
            Url.joinQueryString(dQueryParameters),
        ),
        headers: Object.apply(Object.clone(defaultHeaders), {
            ['X-Requested-With']: 'XMLHttpRequest',
            Referer: url,
        }),
    }).await;
    sRawParsed := Convert.decodeJson(sResp.body);
    sData := Convert.decodeUtf8(
        encrypto.decrypt({
            data: Convert.decodeBase64(sRawParsed.data),
            key: sKey,
            iv: iv,
        })
    ).replaceFirst('o"<P{#meme":', 'e":[{"file":');
    sParsed := Convert.decodeJson(sData);
    sources := [];
    sources.pushAll(sParsed.source);
    sources.pushAll(sParsed.source_bk);

    return Fiber.runConcurrently(
        sources
            .map(-> x : x.file)
            .unique()
            .map(-> x : -> async {
                if (x.contains('.m3u8')) {
                    m3u8 := parseM3U8(x).await;
                    return m3u8.map(-> x : {
                        url: x,
                        headers: defaultHeaders,
                        quality: tryGetQuality(x),
                        locale: config.defaultLocale,
                    });
                }

                return [{
                    url: x,
                    headers: defaultHeaders,
                    quality: tryGetQuality(x),
                    locale: config.defaultLocale,
                }];
            })
    ).await.flat(1);
};

parseM3U8 := -> async url {
    resp := Http.request({
        method: 'get',
        url: url,
        headers: {
            Referer: url,
        },
    }).await;
    prevUrl := RegExp.new(r'(.*?)[^\/]+$').firstMatch(url).group(1);

    return resp.body.split('\n')
        .filter(-> x : !x.startsWith('#') && (x.contains('.m3u8') || x.contains('.ts')))
        .map(-> x : x.startsWith('http') ? x : prevUrl + x);
};

encrypto := {
    mode: 'cbc',
    padding: 'PKCS7',
    encrypt: -> options : Crypto.aesEncrypt({
        input: options.data,
        key: options.key,
        iv: options.iv,
        mode: encrypto.mode,
        padding: encrypto.padding,
    }),
    decrypt: -> options : Crypto.aesDecrypt({
        input: options.data,
        key: options.key,
        iv: options.iv,
        mode: encrypto.mode,
        padding: encrypto.padding,
    }),
};
