# import '../../../shared/extractors/fembed.beize' as fembed;
import './parsers/gogoplay.beize' as gogoplay;
import './config.beize' as config;
import '../../../shared/extractors/streamsb.beize' as streamsb;
import '../../../shared/utils/debugx.beize' as debugx;

extractor := {
    defaultLocale: config.defaultLocale,
    search: -> async terms, locale {
        url := config.getSearchUrl(terms);
        resp := Http.request({
            method: 'get',
            url: url,
            headers: config.defaultHeaders,
        }).await;
        document := HtmlElement.parse(resp.body);

        return document.querySelectorAll('.items li').map(-> x {
            titleElement := x.querySelector('.name a');
            url := titleElement.attributes.href.trim();
            thumbnail := x.querySelector('.img img').attributes.src.trim();

            return {
                title: titleElement.text.trim(),
                url: config.appendBaseUrl(url),
                thumbnail: {
                    url: Url.ensure(thumbnail),
                    headers: config.defaultHeaders,
                },
                locale: config.defaultLocale,
            };
        });
    },
    getInfo: -> async url, locale {
        url = Url.ensure(url);
        resp := Http.request({
            method: 'get',
            url: url,
            headers: config.defaultHeaders,
        }).await;
        document := HtmlElement.parse(resp.body);

        epPagesElement := document.querySelectorAll('#episode_page a');
        eUrl := config.getEpisodeApiUrl(
            document.querySelector('input#movie_id').attributes.value.trim(),
            epPagesElement[0].attributes.ep_start.trim(),
            epPagesElement[epPagesElement.length() - 1].attributes.ep_end.trim(),
        );
        eResp := Http.request({
            method: 'get',
            url: eUrl,
            headers: config.defaultHeaders,
        }).await;
        eDocument := HtmlElement.parse(eResp.body);
        episodes := eDocument.querySelectorAll('#episode_related a').map(-> x {
            episode := x.querySelector('.name').text.replaceFirst('EP', '').trim();
            url := x.attributes.href.trim();

            return {
                episode: episode,
                url: config.appendBaseUrl(url),
                locale: config.defaultLocale,
            };
        });

        return {
            title: document.querySelector('.anime_info_body_bg h1').text.trim(),
            url: Url.ensure(url),
            thumbnail: {
                url: Url.ensure(
                    document.querySelector('.anime_info_body_bg img')
                        .attributes
                        .src
                        .trim()
                ),
                headers: config.defaultHeaders,
            },
            episodes: episodes,
            locale: config.defaultLocale,
            availableLocales: [config.defaultLocale],
        };
    },
    getSource: -> async url, locale {
        url = Url.ensure(url);
        resp := Http.request({
            method: 'get',
            url: url,
            headers: config.defaultHeaders,
        }).await;
        document := HtmlElement.parse(resp.body);

        streams := Fiber.runConcurrently(
            document
                .querySelectorAll('.anime_muti_link ul > li')
                .map(-> x : -> async {
                    link := x.querySelector('a').attributes['data-video'];
                    if (!link) return [];
                    when {
                        x.classes.contains('anime') || x.classes.contains('vidcdn'): {
                            return debugx.executeAsyncSafe(
                                -> : gogoplay.parse(link),
                                []
                            );
                        }
                        # x.classes.contains('xstreamcdn'): {
                        #     return debugx.executeAsyncSafe(
                        #         -> : fembed.parse(link, config.defaultLocale),
                        #         []
                        #     );
                        # }
                        x.classes.contains('streamsb'): {
                            return debugx.executeAsyncSafe(
                                -> : streamsb.parse(link, config.defaultLocale),
                                []
                            );
                        }
                        else: return [];
                    }
                })
        ).await.flat(1);

        return {
            streams: streams,
            subtitles: [],
        };
    },
};
