import './config.beize' as config;

extractor := {
    defaultLocale: config.defaultLocale,
    search: -> async terms, locale {
        resp := Http.request({
            method: 'get',
            url: config.getSearchApiUrl(terms),
            headers: config.defaultHeaders,
        }).await;
        parsed := Convert.decodeJson(resp.body);
        
        return parsed.data.map(
            -> x : {
                title: x.title,
                url: config.getAnimeUrl(x.session),
                thumbnail: {
                    url: Url.ensure(x.poster),
                    headers: config.defaultHeaders,
                },
                locale: config.defaultLocale,
            }
        );
    },
    getInfo: -> async url, locale {
        url = Url.ensure(url);
        slug := config.parseSlug(url);
        resp := Http.request({
            method: 'get',
            url: url,
            headers: config.defaultHeaders,
        }).await;
        id := RegExp.new(r'\/a\/(\d+)').firstMatch(resp.body).group(1);
        document := HtmlElement.parse(resp.body);

        eResp := Http.request({
            method: 'get',
            url: config.getEpisodesApiUrl(slug),
            headers: config.defaultHeaders,
        }).await;
        eParsed := Convert.decodeJson(eResp.body);
        eStart := eParsed.from;
        eTotal := eParsed.total;
        episodes := List.generate(eTotal, -> i {
            eNum := eStart + i;
            return {
                episode: String.from(eNum),
                url: config.getCustomEpisodeUrl(id, slug, eNum),
                locale: config.defaultLocale,
            };
        });

        return {
            title: document
                .querySelector('.anime-header .title-wrapper > h1 > span')
                .text
                .trim(),
            url: url,
            thumbnail: {
                url: Url.ensure(
                    document
                        .querySelector('.anime-header .anime-poster img')
                        .attributes['data-src']
                        .trim()
                ),
                headers: config.defaultHeaders,
            },
            episodes: episodes,
            locale: config.defaultLocale,
            availableLocales: [config.defaultLocale],
        };
    },
    getSource: -> async url, locale {
        url = Url.ensure(url);

        if (config.isPlayUrl(url)) {
            uParsed := config.parsePlayUrl(url);
            return _getSource(uParsed.animeSlug, uParsed.episodeSlug).await;
        }

        uParsed := config.parseCustomEpisodeUrl(url);
        eNum := Number.from(uParsed.episode);
        eResp := Http.request({
            method: 'get',
            url: config.getEpisodesApiUrlFromNumber(uParsed.animeSlug, eNum),
            headers: config.defaultHeaders,
        }).await;
        eParsed := Convert.decodeJson(eResp.body);
        eData := eParsed.data.find(-> x : x.episode == eNum);
        return _getSource(uParsed.animeSlug, eData.session).await;
    },
};

_getSource := -> async animeSlug, episodeSlug {
    resp := Http.request({
        method: 'get',
        url: config.getPlayUrl(animeSlug, episodeSlug),
        headers: config.defaultHeaders,
    }).await;
    embedUrls := RegExp
        .new(r`data-src="([^"]+)"[^>]+data-resolution="(\d+)"`)
        .allMatches(resp.body);
    
    streams := Fiber.runConcurrently(
        embedUrls.map(-> x : -> async {
            embedUrl := Url.ensure(x.group(1));
            parsedEmbedUrl := Url.parse(embedUrl);
            eResp := Http.request({
                method: 'get',
                url: embedUrl,
                headers: config.defaultHeaders,
            }).await;
            m := RegExp.new(r`Plyr\|(.+?)['"]`)
                .firstMatch(eResp.body)
                .group(1)
                .split('|');

            return {
                url: '{}://{}-{}.{}.{}.{}/{}/{}/{}/{}.{}'.format(m.reversed()),
                headers: Object.apply(Object.clone(config.defaultHeaders), {
                    Referer: parsedEmbedUrl.origin,
                }),
                quality: x.group(2),
                locale: config.defaultLocale,
            };
        })
    ).await;

    return {
        streams: streams,
        subtitles: [],
    };
};
