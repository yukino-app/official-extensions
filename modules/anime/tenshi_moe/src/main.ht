import 'utils.ht';
import '../../../shared/utils.ht';

fetcher := $DDOSGuardFetcher();

_headers := -> headers {
    return fetcher.attachBypassHeaders(headers);
}

extractor := AnimeExtractor(
    defaultLocale: $.defaultLocale,
    search: -> terms, locale {
        url := $.getSearchURL(terms);

        return AsyncTask.resolve(
            () => fetcher.getBody(
                method: 'get',
                url: url,
                headers: Collection.mergeMap($.defaultHeaders, {
                    'Cookie': 'loop-view=thumb;',
                }),
            ),
            onDone: -> html {
                document := HtmlElement.parse(html);

                return Collection.mapList(
                    document.querySelectorAll('.anime-loop li'),
                    -> i, x {
                        link := x.querySelector('a');
                        title := link.attributes['title'].trim();
                        url := link.attributes['href'].trim();
                        thumbnail := link.querySelector('.image').attributes['src'].trim();

                        return SearchInfo(
                            title: title,
                            url: URL.ensureURL(url),
                            thumbnail: ImageDescriber(
                                url: URL.ensureURL(thumbnail),
                                headers: _headers($.defaultHeaders),
                            ),
                            locale: $.defaultLocale,
                        );
                    }
                );
            }
        );
    },
    getInfo: -> url, locale {
        url := URL.ensureURL(url);

        return AsyncTask.resolve(
            () => fetcher.getBody(
                method: 'get',
                url: url,
                headers: $.defaultHeaders,
            ),
            onDone: -> html {
                document := HtmlElement.parse(html);

                estimated := document.querySelector('.entry-episodes .badge.badge-secondary.align-top').text.trim();
                trimmedURL := url.endsWith('/') ? url.substring(0, url.length - 1) : url;

                episodes := Collection.mapList(
                    Collection.rangeList(0, int.parse(estimated)),
                    -> i: num, x: num {
                        epNum := '${x + 1}';
                        
                        return EpisodeInfo(
                            episode: epNum,
                            url: URL.ensureURL('${trimmedURL}/${epNum}'),
                            locale: $.defaultLocale,
                        );
                    }
                );

                return AnimeInfo(
                    title: document.querySelector('.entry-header').text.trim(),
                    url: URL.ensureURL(url),
                    thumbnail: ImageDescriber(
                        url: URL.ensureURL(document.querySelector('img.cover-image').attributes['src'].trim()),
                        headers: _headers($.defaultHeaders),
                    ),
                    episodes: episodes,
                    locale: $.defaultLocale,
                    availableLocales: [
                        $.defaultLocale,
                    ]
                );
            }
        );
    },
    getSources: -> _url, locale {
        url := URL.ensureURL(_url);

        return AsyncTask.resolve(
            () => fetcher.getBody(
                method: 'get',
                url: url,
                headers: $.defaultHeaders,
            ),
            onDone: -> html {
                iframeURL := Regex('<iframe src="([^"]+)"').firstMatch(html).group(1);
                iframeHeaders := Collection.mergeMap($.defaultHeaders, {
                    'Referer': url,
                });
                rHeaders := _headers(iframeHeaders);

                return AsyncTask.resolve(
                    () => fetcher.getBody(
                        method: 'get',
                        url: iframeURL,
                        headers: iframeHeaders,
                    ),
                    onDone: -> iframeHtml {
                        sources := Regex('sources:[\\s]+\\[([^\\]]+)')
                            .firstMatch(iframeHtml)
                            .group(1);

                        return Collection.mapList(
                            Regex('src:[\\s]+?["\']([^\'"]+)[\\S\\s]+?size:[\\s]+?(\\d+)')
                                .allMatches(sources),
                            -> i, x {
                                return EpisodeSource(
                                    url: URL.ensureURL(x.group(1)),
                                    quality: x.group(2),
                                    headers: rHeaders,
                                    locale: $.defaultLocale,
                                );
                            }
                        );
                    }
                );
            }
        );
    },
);
