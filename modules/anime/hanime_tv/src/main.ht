import 'utils.ht';

extractor := AnimeExtractor(
    defaultLocale: $.defaultLocale,
    search: -> terms, locale {
        return AsyncTask.resolve(
            () => Http.fetch(
                method: 'post',
                url: $.baseSearchApiURL,
                headers: Collection.mergeMap($.defaultHeaders, {
                    'Content-Type': 'application/json;charset=UTF-8',
                }),
                body: Converter.jsonEncode({
                    'search_text': 'overflow',
                    'tags': [],
                    'tags_mode': 'AND',
                    'brands': [],
                    'blacklist': [],
                    'order_by': 'created_at_unix',
                    'ordering': 'desc',
                    'page': 0
                }),
            ),
            onDone: -> resp {
                parsed := Converter.jsonDecode(resp.body);
                hits := Converter.jsonDecode(parsed['hits']);

                return Collection.mapList(hits, -> i, x {
                    title := x['name'];
                    censored := x['is_censored'];

                    return SearchInfo(
                        title: '${title}${censored ? ' (Censored)' : ''}',
                        url: $.getAnimeURL(x['slug']),
                        thumbnail: ImageDescriber(
                            url: URL.ensureURL(x['cover_url']),
                            headers: $.defaultHeaders,
                        ),
                        locale: $.defaultLocale,
                    );
                });
            },
        );
    },
    getInfo: -> url, locale {
        slug := $.parseSlug(url);

        return AsyncTask.resolve(
            () => _getInfo(slug),
            onDone: -> resp {
                title := resp['hentai_video']['name'];
                censored := resp['hentai_video']['is_censored'];
                url := $.getAnimeURL(slug);

                return AnimeInfo(
                    title: '${title}${censored ? ' (Censored)' : ''}',
                    url: url,
                    thumbnail: ImageDescriber(
                        url: URL.ensureURL(resp['hentai_video']['cover_url']),
                        headers: $.defaultHeaders,
                    ),
                    episodes: [
                        EpisodeInfo(
                            episode: '1',
                            url: url,
                            locale: $.defaultLocale,
                        ),
                    ],
                    locale: $.defaultLocale,
                    availableLocales: [
                        $.defaultLocale,
                    ]
                );
            },
        );
    },
    getSources: fun(url, locale {
        slug := $.parseSlug(url);

        return AsyncTask.resolve(
            () => _getInfo(slug),
            onDone: -> resp {
                return Collection.flattenList(
                    Collection.mapList(resp['videos_manifest']['servers'], -> i, x {
                        return Collection.mapList(
                            Collection.filterList(
                                x['streams'],
                                (i, x) => x['kind'] == 'hls',
                            ),
                            -> i, x {
                                return EpisodeSource(
                                    url: x['url'],
                                    headers: $.defaultHeaders,
                                    quality: Regex('\d+$').firstMatch(x['slug'])?.group(0) ?? 'unknown',
                                    locale: $.defaultLocale,
                                );
                            }
                        );
                    }),
                    1,
                );
            }
        );
    },
);

_infoCache := {};

_getInfo := -> slug {
    url := $.getAnimeApiURL(slug);

    return _infoCache[slug] ?? AsyncTask.resolve(
        () => Http.fetch(
            method: 'get',
            url: url,
            headers: $.defaultHeaders,
        ),
        onDone: -> resp {
            parsed := Converter.jsonDecode(resp.body);
            _infoCache[slug] = parsed;
            return parsed;
        },
    );
}
