import './config.beize' as config;

extractor := {
    defaultLocale: config.defaultLocale,
    search: -> async terms, locale {
        resp := Http.request({
            method: 'post',
            url: config.searchApiUrl,
            headers: Object.apply(Object.clone(config.defaultHeaders), {
                ['Content-Type']: 'application/json;charset=UTF-8',
            }),
            body: Convert.encodeJson({
                search_text: terms,
                tags: [],
                tags_mode: 'AND',
                brands: [],
                blacklist: [],
                order_by: 'created_at_unix',
                ordering: 'desc',
                page: 0,
            }),
        }).await;
        parsed := Convert.decodeJson(resp.body);
        hits := Convert.decodeJson(parsed.hits);

        return hits.map(-> x {
            title := x.name;
            censored := x.is_censored;
            
            return {
                title: _makeTitle(title, censored),
                url: config.getAnimeUrl(x.slug),
                thumbnail: {
                    url: x.cover_url,
                    headers: config.defaultHeaders,
                },
                locale: config.defaultLocale,
            };
        });
    },
    getInfo: -> async url, locale {
        url = Url.ensure(url);
        slug := config.parseSlug(url);
        resp := _getInfo(slug).await;

        title := resp.hentai_video.name;
        censored := resp.hentai_video.is_censored;
        url := config.getAnimeUrl(slug);

        return {
            title: _makeTitle(title, censored),
            url: url,
            thumbnail: {
                url: resp.hentai_video.cover_url,
                headers: config.defaultHeaders,
            },
            episodes: [{
                episode: '1',
                url: url,
                locale: config.defaultLocale,
            }],
            locale: config.defaultLocale,
            availableLocales: [config.defaultLocale],
        };
    },
    getSource: -> async url, locale {
        url = Url.ensure(url);
        slug := config.parseSlug(url);
        resp := _getInfo(slug).await;

        streams := resp.videos_manifest.servers.map(-> x {
            return x.streams
                .filter(-> x : x.kind == 'hls')
                .map(-> x : {
                    url: x.url,
                    headers: config.defaultHeaders,
                    quality: RegExp.new(r'\d+$').firstMatch(x.slug)?.group(0) ?? 'unknown',
                    locale: config.defaultLocale,
                });
        }).flat(1);

        return {
            streams: streams,
            subtitles: [],
        };
    },
};

_infoCache := {};

_getInfo := -> async slug : _infoCache[slug] ?? _fetchInfo(slug).await;

_fetchInfo := -> async slug {
    url := config.getAnimeApiUrl(slug);
    resp := Http.request({
        method: 'get',
        url: url,
        headers: config.defaultHeaders,
    }).await;
    parsed := Convert.decodeJson(resp.body);
    _infoCache[slug] = parsed;
    return parsed;
};

_makeTitle := -> title, censored : title + (censored ? ' (Censored)' : '');
