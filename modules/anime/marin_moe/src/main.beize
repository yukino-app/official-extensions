import './config.beize' as config;
import './fetcher.beize' as fetcher;

extractor := {
    defaultLocale: config.defaultLocale,
    search: -> async terms, locale {
        resp := fetcher.request({
            method: 'get',
            url: config.getSearchUrl(terms),
            headers: Object.apply(Object.clone(config.defaultHeaders), {
                ['x-inertia-partial-data']: 'anime_list',
                ['x-inertia-partial-component']: 'AnimeIndex',
                ['x-requested-with']: 'XMLHttpRequest',
            }),
        }).await;
        # body := RegExp.new(r'data-page="([\S\s]+)">').firstMatch(resp.body).group(1);
        parsed := Convert.decodeJson(resp.body);

        return parsed.props.anime_list.data.map(-> x : {
            title: x.title,
            url: config.getAnimeUrl(x.slug),
            thumbnail: {
                url: x.cover,
                headers: config.defaultHeaders,
            },
            locale: config.defaultLocale,
        });
    },
    getInfo: -> async url, locale {
        url = Url.ensure(url);
        resp := fetcher.request({
            method: 'get',
            url: url,
            headers: Object.apply(Object.clone(config.defaultHeaders), {
                ['x-inertia-partial-data']: 'anime,episode_list',
                ['x-inertia-partial-component']: 'AnimeDetail',
                ['x-requested-with']: 'XMLHttpRequest',
            }),
        }).await;
        parsed := Convert.decodeJson(resp.body);
        slug := parsed.props.anime.slug;

        episodes := parsed.props.episode_list.data.map(-> x {
            return {
                episode: x.slug,
                url: config.getEpisodeUrl(slug, x.slug),
                locale: config.defaultLocale,
            };
        });

        return {
            title: parsed.props.anime.title,
            url: url,
            thumbnail: {
                url: parsed.props.anime.cover,
                headers: config.defaultHeaders,
            },
            episodes: episodes,
            locale: config.defaultLocale,
            availableLocales: [config.defaultLocale],
        };
    },
    getSource: -> async url, locale {
        url = Url.ensure(url);
        resp := fetcher.request({
            method: 'get',
            url: url,
            headers: Object.apply(Object.clone(config.defaultHeaders), {
                ['x-inertia-partial-data']: 'video',
                ['x-inertia-partial-component']: 'Episode',
                ['x-requested-with']: 'XMLHttpRequest',
            }),
        }).await;
        parsed := Convert.decodeJson(resp.body);

        streams := parsed.props.video.data.mirror.map(-> x : {
            url: x.code.file,
            headers: config.defaultHeaders,
            quality: x.resolution,
            locale: config.defaultLocale,
        });

        return {
            streams: streams,
            subtitles: [],
        };
    },
};
