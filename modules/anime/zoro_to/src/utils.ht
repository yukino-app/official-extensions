
    static const baseUrl = 'https://zoro.to';
    static const baseAjaxUrl = 'https://zoro.to/ajax/v2';

    defaultHeaders := {
        'User-Agent': Http.defaultDesktopUserAgent(),
        'Referer': baseUrl,
    }

    defaultLocale := Locale.parse('en');

    getSearchUrl := -> terms {
        return Url.ensure('{baseUrl}/search?keyword={terms}');
    }

    getEpisodesApiUrl := -> id {
        return Url.ensure('{baseAjaxUrl}/episode/list/{id}');
    }

    getEpisodeApiUrl := -> url {
        id := RegExp.new('\\?ep=(\\d+)').firstMatch(url).group(1);
        return Url.ensure('{baseAjaxUrl}/episode/servers?episodeId={id}');
    }

    getSourcesApiUrl := -> id {
        return Url.ensure('{baseAjaxUrl}/episode/sources?id={id}');
    }

    appendBaseUrl := -> route {
        return Url.ensure('{baseUrl}{route}');
    }

    getRecaptchaToken := -> url {
        return AsyncTask.resolve(
            () => Http.fetch(
                method: 'get',
                url: url,
                headers: defaultHeaders,
            ),
            onDone: (mockRes {
                rKey := RegExp.new('recaptchaSiteKey\\s+=\\s+[\'"]([^\'"]+)[\'"]').firstMatch(mockRes.body).group(1);
                rNumber := RegExp.new('recaptchaNumber\\s+=\\s+[\'"](\\d+)[\'"]').firstMatch(mockRes.body).group(1);

                _domain := RegExp.new('(https?:\\/\\/[^/]+)').firstMatch(url).group(1);
                domain := Converter.base64Encode(Converter.utf8Encode('{_domain}:433')).replaceAll('=', '') + '.';

                return AsyncTask.resolve(
                    () => Http.fetch(
                        method: 'get',
                        url: Url.ensure('https://www.google.com/recaptcha/api.js?render={rKey}'),
                        headers: Collection.mergeMap(defaultHeaders, {
                            'Referrer': '{_domain}/',
                        }),
                    ),
                    onDone: (vTokenResp {
                        vToken := RegExp.new('releases/([^/]+)').firstMatch(vTokenResp.body).group(1);

                        return AsyncTask.resolve(
                            () => Http.fetch(
                                method: 'get',
                                url: Url.ensure('https://www.google.com/recaptcha/api2/anchor?ar=1&hl=en&size=invisible&cb=kr60249sk&k={rKey}&co={domain}&v={vToken}'),
                                headers: Collection.mergeMap(defaultHeaders, {
                                    'Referrer': '{_domain}/',
                                }),
                            ),
                            onDone: (rTokenResp {
                                rToken := RegExp.new('id="recaptcha-token" value="([^"]+)"').firstMatch(rTokenResp.body).group(1);

                                return AsyncTask.resolve(
                                    () => Http.fetch(
                                        method: 'post',
                                        url: Url.ensure('https://www.google.com/recaptcha/api2/reload?k={rKey}'),
                                        headers: Collection.mergeMap(defaultHeaders, {
                                            'Referrer': '{_domain}/',
                                            'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',
                                        }),
                                        body: Url.joinQueryParameters({
                                            'v': vToken,
                                            'reason': 'q',
                                            'k': rKey,
                                            'c': rToken,
                                            'sa': '',
                                            'co': domain,
                                        })
                                    ),
                                    onDone: (fTokenResp {                                       
                                        return {
                                            'token': RegExp.new('rresp","(.+?)"').firstMatch(fTokenResp.body).group(1),
                                            'number': rNumber,
                                        };
                                    }
                                );
                            }
                        );
                    }
                );
            }
        );
    }
}
