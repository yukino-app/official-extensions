import './parsers/rapidcloud.fbs' as rapidcloud;
import './config.fbs' as config;

extractor := {
    defaultLocale: config.defaultLocale,
    search: -> terms, locale {
        url := config.getSearchUrl(terms);
        resp := Http.request({
            method: 'get',
            url: url,
            headers: config.defaultHeaders,
        });
        document := HtmlElement.parse(resp.body);

        return document.querySelectorAll('#main-content .tab-content .flw-item').map(-> x {
            title := x.querySelector('.film-name a');
            url := title.attributes.href.trim();
            thumbnail := x.querySelector('.film-poster-img').attributes['data-src'].trim();

            return {
                title: title.text.trim(),
                url: config.appendBaseUrl(url),
                thumbnail: {
                    url: Url.ensure(thumbnail),
                    headers: config.defaultHeaders,
                },
                locale: config.defaultLocale,
            };
        });
    },
    getInfo: -> url, locale {
        url = Url.ensure(url);
        resp := Http.request({
            method: 'get',
            url: url,
            headers: config.defaultHeaders,
        });
        document := HtmlElement.parse(resp.body);
        id := document.querySelector('#wrapper').attributes['data-id'].trim();

        epUrl := config.getEpisodesApiUrl(id);                
        epResp := Http.request({
            method: 'get',
            url: epUrl,
            headers: Object.apply(Object.clone(config.defaultHeaders), {
                Referer: url,
                ['X-Requested-With']: 'XMLHttpRequest',
            }),
        });
        epParsed := Convert.decodeJson(epResp.body);
        epDocument := HtmlElement.parse(epParsed['html']);
        episodes := epDocument.querySelectorAll('.ss-list > .ep-item').map(-> x {
            episode := x.attributes['data-number'].trim();
            epUrl := x.attributes['href'].trim();

            return {
                episode: episode,
                url: config.appendBaseUrl(epUrl),
                locale: config.defaultLocale,
            };
        });

        return {
            title: document.querySelector('#ani_detail .film-name').text.trim(),
            url: url,
            thumbnail: {
                url: Url.ensure(
                    document
                        .querySelector('#ani_detail .film-poster-img')
                        .attributes
                        .src
                        .trim()
                ),
                headers: config.defaultHeaders,
            },
            episodes: episodes,
            locale: config.defaultLocale,
            availableLocales: [config.defaultLocale],
        };
    },
    getSources: -> url, locale {
        url = config.getEpisodeApiUrl(url);
        resp := Http.request({
            method: 'get',
            url: url,
            headers: config.defaultHeaders,
        });
        parsed := Convert.decodeJson(resp.body);
        return RegExp
            .new(r'data-id="(\d+)"')
            .allMatches(parsed.html)
            .map(-> x {
                id := x.group(1);
                sUrl := config.getSourcesApiUrl(id);
                sResp := Http.request({
                    method: 'get',
                    url: sUrl,
                    headers: Object.apply(Object.clone(config.defaultHeaders), {
                        Referer: url,
                        ['X-Requested-With']: 'XMLHttpRequest',
                    }),
                });
                sParsed := Convert.decodeJson(sResp.body);
                embedUrl := sParsed.link;
                when {
                    embedUrl.contains('rapid-cloud'): return rapidcloud.parse(embedUrl);
                    else: return [];
                }
            })
            .filter(-> x : x != null)
            .flat(1);
    },
};
