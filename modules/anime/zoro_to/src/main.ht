import 'parsers/rapidcloud.ht';
import 'utils.ht';

extractor := {
    defaultLocale: $.defaultLocale,
    search: -> terms, locale {
        url := $.getSearchURL(terms);
        
        return AsyncTask.resolve(
            () => Http.fetch(
                method: 'get',
                url: url,
                headers: $.defaultHeaders,
            ),
            onDone: -> resp {
                document := HtmlElement.parse(resp.body);

                return Collection.mapList(
                    document.querySelectorAll('#main-content .tab-content .flw-item'),
                    -> i, x {
                        title := x.querySelector('.film-name a');
                        url := title.attributes['href'].trim();
                        thumbnail := x.querySelector('.film-poster-img').attributes['data-src'].trim();

                        return {
                            title: title.text.trim(),
                            url: $.appendBaseURL(url),
                            thumbnail: {
                                url: Url.ensure(thumbnail),
                                headers: $.defaultHeaders,
                            ),
                            locale: $.defaultLocale,
                        );
                    }
                );
            }
        );
    },
    getInfo: -> _url, locale {
        url := Url.ensure(_url);

        return AsyncTask.resolve(
            () => Http.fetch(
                method: 'get',
                url: url,
                headers: $.defaultHeaders,
            ),
            onDone: -> resp {
                document := HtmlElement.parse(resp.body);

                id := document.querySelector('#wrapper').attributes['data-id'].trim();
                epURL := $.getEpisodesApiURL(id);
                
                return AsyncTask.resolve(
                    () => Http.fetch(
                        method: 'get',
                        url: epURL,
                        headers: Collection.mergeMap($.defaultHeaders, {
                            'Referer': url,
                            'X-Requested-With': 'XMLHttpRequest',
                        }),
                    ),
                    onDone: -> epResp {
                        epParsed := Converter.jsonDecode(epResp.body);
                        epDocument := HtmlElement.parse(epParsed['html']);

                        episodes := Collection.mapList(
                            epDocument.querySelectorAll('.ss-list > .ep-item'),
                            -> i, x {
                                episode := x.attributes['data-number'].trim();
                                epURL := x.attributes['href'].trim();

                                return {
                                    episode: episode,
                                    url: $.appendBaseURL(epURL),
                                    locale: $.defaultLocale,
                                );
                            }
                        );

                        return {
                            title: document.querySelector('#ani_detail .film-name').text.trim(),
                            url: url,
                            thumbnail: {
                                url: Url.ensure(document.querySelector('#ani_detail .film-poster-img').attributes['src'].trim()),
                                headers: $.defaultHeaders,
                            ),
                            episodes: episodes,
                            locale: $.defaultLocale,
                            availableLocales: [
                                $.defaultLocale,
                            ]
                        );
                    }
                );
            }
        );
    },
    getSources: -> _url, locale {
        url := $.getEpisodeApiURL(_url);

        return AsyncTask.resolve(
            () => Http.fetch(
                method: 'get',
                url: url,
                headers: $.defaultHeaders,
            ),
            onDone: -> resp {
                parsed := Converter.jsonDecode(resp.body);

                return AsyncTask.resolveAll(
                    Collection.mapList(
                        Regex('data-id="(\\d+)"').allMatches(parsed['html']),
                        -> i, x {
                            id := x.group(1);
                            sourceUrl := $.getSourcesApiURL(id);

                            return () => AsyncTask.resolve(
                                () => Http.fetch(
                                    method: 'get',
                                    url: sourceUrl,
                                    headers: Collection.mergeMap($.defaultHeaders, {
                                        'Referer': url,
                                        'X-Requested-With': 'XMLHttpRequest',
                                    }),
                                ),
                                onDone: -> sResp {
                                    sParsed := Converter.jsonDecode(sResp.body);
                                    embedUrl := sParsed['link'];

                                    if (embedUrl.contains('rapid-cloud') {
                                        return RapidCloud.parse(embedUrl);
                                    }

                                    return [];
                                }
                            ); 
                        },
                    ),
                    onDone: (res) => Collection.flattenList(
                        Collection.filterList(res, (i, x) => x != null),
                        1,
                    ),
                );
            }
        );
    },
);
