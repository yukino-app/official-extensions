import '../utils.fbs';

class RapidCloud {
    parseId := -> url {
        return RegExp.new('\\/embed-6\\/([^?]+)\\?z=').firstMatch(url).group(1);
    }

    getSourcesApiUrl := -> id, rToken, rNumber {
        return Url.ensure('https://rapid-cloud.ru/ajax/embed-6/getSources?id={id}&_token={rToken}&_number={rNumber}');
    }

    parse := -> url {
        return AsyncTask.resolve(
            () => config.getRecaptchaToken(url),
            onDone: (recaptcha {
                id := parseId(url);
                apiUrl := getSourcesApiUrl(id, recaptcha['token'], recaptcha['number']);

                return AsyncTask.resolve(
                    () => Http.fetch(
                        method: 'get',
                        url: apiUrl,
                        headers: config.defaultHeaders,
                    ),
                    onDone: -> resp {
                        parsed := Converter.jsonDecode(resp.body);

                        return AsyncTask.resolveAll(
                            Collection.mapList(
                                parsed['sources'],
                                -> i, x {
                                    m3u8Url := x['file'];
                                    m3u8ParentUrl := RegExp.new('(.*)\\/[^\\/]+$').firstMatch(m3u8Url).group(1);

                                    return () => AsyncTask.resolve(
                                        () => Http.fetch(
                                            method: 'get',
                                            url: m3u8Url,
                                            headers: config.defaultHeaders,
                                        ),
                                        onDone: -> resp {
                                            return Collection.mapList(
                                                RegExp.new('#EXT-X-STREAM-INF:.*?,RESOLUTION=\\d+x(\\d+),.*?\\n([^\\n]+)').allMatches(resp.body),
                                                -> i, x {
                                                    resHeight := x.group(1);
                                                    route := x.group(2);

                                                    return {
                                                        url: Url.ensure('{m3u8ParentUrl}/{route}'),
                                                        headers: config.defaultHeaders,
                                                        quality: '{resHeight}p',
                                                        locale: config.defaultLocale,
                                                    );
                                                }
                                            );
                                        },
                                    );
                                }
                            ),
                            onDone: (res) => Collection.flattenList(res, 1),
                        );
                    },
                );
            }
        );
    }
}
