import '../utils/hexify.beize' as hexify;

defaultHeaders := {
    ['User-Agent']: Http.defaultDesktopUserAgent(),
};

getStreamsApiUrl := -> baseUrl, id : Url.ensure(
    '{}/375664356a494546326c4b797c7c6e756577776778623171737/{}'.format([baseUrl, encodeId(id)])
);

parse := -> async url, locale {
    url = Url.ensure(url);
    parsedUrl := Url.parse(url);
    id := RegExp.new(r'/e/([^?#&/.]+)').firstMatch(url)?.group(1);
    if (!id) return [];

    resp := Http.request({
        method: 'get',
        url: getStreamsApiUrl(parsedUrl.origin, id),
        headers: Object.apply(Object.clone(defaultHeaders), {
            Referer: url,
            watchsb: 'sbstream',
        }),
    }).await;
    parsed := Convert.decodeJson(resp.body);
    if (parsed.status_code != 200) return [];

    return [parsed.stream_data.file, parsed.stream_data.backup].map(-> x : {
        url: Url.ensure(x),
        headers: Object.apply(Object.clone(defaultHeaders), {
            Referer: parsedUrl.origin,
        }),
        quality: 'unknown',
        locale: locale,
    });
};

encodeId := -> id {
    id = 'CringeScrape||{}||CringeScrape||streamsb'.format([id]);
    return hexify.encode(id);
};
